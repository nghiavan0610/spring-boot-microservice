version: '3.8'
services:
  product-mongo:
    image: mongo:6.0-focal
    container_name: product-mongo
    restart: unless-stopped
    ports:
      - '27017:27017'
    networks:
      - spring-boot-microservice
    volumes:
      - ./data/product-data:/data/db

  order-postgres:
    image: postgres:13.5
    container_name: order-postgres
    restart: unless-stopped
    ports:
      - '5431:5432'
    expose:
      - '5431'
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: ben
      POSTGRES_PASSWORD: ben1234
      PGDATA: /data/postgres
    networks:
      - spring-boot-microservice
    volumes:
      - ./data/order-postgres:/data/postgres

  inventory-postgres:
    image: postgres:13.5
    container_name: inventory-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: ben
      POSTGRES_PASSWORD: ben1234
      PGDATA: /data/postgres
    networks:
      - spring-boot-microservice
    volumes:
      - ./data/inventory-postgres:/data/postgres

  keycloak-mysql:
    container_name: keycloak-mysql
    image: benacio/mysql-lowmemory:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: ben1234
    networks:
      - spring-boot-microservice
    volumes:
      - ./data/mysql_keycloak_data:/var/lib/mysql

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:22.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: ben1234
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    networks:
      - spring-boot-microservice
    depends_on:
      - keycloak-mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring-boot-microservice

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring-boot-microservice

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped
    networks:
      - spring-boot-microservice

  discovery-server:
    image: benacio/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring-boot-microservice
    depends_on:
      - zipkin

  api-gateway:
    image: benacio/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    networks:
      - spring-boot-microservice
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  product-service:
    container_name: product-service
    image: benacio/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring-boot-microservice
    depends_on:
      - product-mongo
      - discovery-server
      - api-gateway

  order-service:
    container_name: order-service
    image: benacio/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-postgres:5431/order-service
    networks:
      - spring-boot-microservice
    depends_on:
      - order-postgres
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  inventory-service:
    container_name: inventory-service
    image: benacio/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://inventory-postgres:5432/inventory-service
    networks:
      - spring-boot-microservice
    depends_on:
      - inventory-postgres
      - discovery-server
      - api-gateway

  notification-service:
    container_name: notification-service
    image: benacio/notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring-boot-microservice
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - spring-boot-microservice
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:9.5.5
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - spring-boot-microservice
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password


networks:
  spring-boot-microservice: