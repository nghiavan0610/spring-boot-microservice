version: '3.8'
services:
  product-mongo:
    image: mongo:6.0-focal
    restart: unless-stopped
    ports:
      - '27017:27017'
    networks:
      - spring-boot-microservice
    volumes:
      - ./dev_data/product-mongo:/data/db

  order-postgres:
    image: postgres:13.5
    restart: unless-stopped
    ports:
      - '5431:5432'
    expose:
      - '5431'
    environment:
      POSTGRES_DB: order-service-dev
      POSTGRES_USER: ben
      POSTGRES_PASSWORD: ben1234
      PGDATA: /data/postgres
    networks:
      - spring-boot-microservice
    volumes:
      - ./dev_data/order-postgres:/data/postgres

  inventory-postgres:
    image: postgres:13.5
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: inventory-service-dev
      POSTGRES_USER: ben
      POSTGRES_PASSWORD: ben1234
      PGDATA: /data/postgres
    networks:
      - spring-boot-microservice
    volumes:
      - ./dev_data/inventory-postgres:/data/postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring-boot-microservice

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - spring-boot-microservice

networks:
  spring-boot-microservice: